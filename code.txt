import sys

from PyQt5.QtWidgets import *

from PyQt5.QtGui import *
from PyQt5.QtCore import *
import pyodbc
import pandas as pd


class StWidgetForm(QGroupBox):
    """
    위젯 베이스 클래스
    """
    def __init__(self):
        QGroupBox.__init__(self)
        self.box = QBoxLayout(QBoxLayout.TopToBottom)
        self.setLayout(self.box)
        
        
class DataFrameModel(QAbstractTableModel):
    DtypeRole = Qt.UserRole + 1000
    ValueRole = Qt.UserRole + 1001

    def __init__(self, df=pd.DataFrame(), parent=None):
        super(DataFrameModel, self).__init__(parent)
        self._dataframe = df

    def setDataFrame(self, dataframe):
        self.beginResetModel()
        self._dataframe = dataframe.copy()
        self.endResetModel()

    def dataFrame(self):
        return self._dataframe

    dataFrame = pyqtProperty(pd.DataFrame, fget=dataFrame, fset=setDataFrame)

    @pyqtSlot(int, Qt.Orientation, result=str)
    def headerData(self, section: int, orientation: Qt.Orientation, role: int = Qt.DisplayRole):
        if role == Qt.DisplayRole:
            if orientation == Qt.Horizontal:
                return self._dataframe.columns[section]
            else:
                return str(self._dataframe.index[section])
        return QVariant()

    def rowCount(self, parent=QModelIndex()):
        if parent.isValid():
            return 0
        return len(self._dataframe.index)

    def columnCount(self, parent=QModelIndex()):
        if parent.isValid():
            return 0
        return self._dataframe.columns.size

    def data(self, index, role=Qt.DisplayRole):
        if not index.isValid() or not (0 <= index.row() < self.rowCount() \
            and 0 <= index.column() < self.columnCount()):
            return QVariant()
        row = self._dataframe.index[index.row()]
        col = self._dataframe.columns[index.column()]
        dt = self._dataframe[col].dtype

        val = self._dataframe.iloc[row][col]
        if role == Qt.DisplayRole:
            return str(val)
        elif role == DataFrameModel.ValueRole:
            return val
        if role == DataFrameModel.DtypeRole:
            return dt
        return QVariant()

    def roleNames(self):
        roles = {
            Qt.DisplayRole: b'display',
            DataFrameModel.DtypeRole: b'dtype',
            DataFrameModel.ValueRole: b'value'
        }
        return roles


class Form(QWidget):
    def __init__(self):
        QWidget.__init__(self, flags=Qt.Widget)
        self.init_widget()
        

    def init_widget(self):
        self.setWindowTitle("인턴 실습")
        widget_laytout = QBoxLayout(QBoxLayout.TopToBottom)
        
        
        self.splitter_1 = QSplitter()
        self.splitter_2 = QSplitter()
        self.splitter_3 = QSplitter()
        
        widget_laytout.addSpacing(20)
        
        self.splitter_1.addWidget(self.loginandselect())

        
        
        self.splitter_2.addWidget(self.tableview())
        
        
        
        
        self.splitter_3.setOrientation(Qt.Vertical)
        
        self.splitter_3.addWidget(self.splitter_1)
        self.splitter_3.addWidget(self.splitter_2)
        
        self.splitter_3.addWidget(self.extract())
        
        widget_laytout.addWidget(self.splitter_3)
        
        
        
        
        

        
        

        
        self.setLayout(widget_laytout)
        
        
    def loginandselect(self):
        group = QGroupBox()
        box = QBoxLayout(QBoxLayout.TopToBottom)
        
        # SQL 서버 접속
        login = QGridLayout()
        self.lbl1 = QLabel('server :', self)
        self.lbl3 = QLabel('Engagement Code :', self)
        self.pname = QLabel('Project Name : ', self)
        self.serverComboBox = QComboBox(self)
        self.le3 = QLineEdit(self)
        self.ProjectCombobox = QComboBox(self)
        self.ConnectButton = QPushButton("SQL Server Connect")
        self.serverComboBox.activated[str].connect(self.serverselected)
        self.ConnectButton.clicked.connect(self.connectButtonClicked)
        self.ProjectCombobox.activated[str].connect(self.projectselected)
        
        
        login.addWidget(self.lbl1, 0, 0, 1, 1)
        login.addWidget(self.serverComboBox, 0, 2, 1, 1)
        login.addWidget(self.ConnectButton, 0, 3, 1, 1)
        
       
        login.addWidget(self.lbl3, 3, 0, 1, 1)
        login.addWidget(self.le3, 3, 2, 1, 1)
        
        login.addWidget(self.lbl3, 4, 0, 1, 1)
        login.addWidget(self.le3, 4, 2, 1, 1)
        
        login.addWidget(self.pname, 5, 0, 1 ,1)
        login.addWidget(self.ProjectCombobox, 5, 2 , 1 , 1)
        
        
        box.addLayout(login)
        
        serverlist = ['--------서버 목록--------', 'KRSEOVMPPACSQ01\INST1','KRSEOVMPPACSQ02\INST1','KRSEOVMPPACSQ03\INST1','KRSEOVMPPACSQ04\INST1',
                     'KRSEOVMPPACSQ05\INST1','KRSEOVMPPACSQ06\INST1', 'KRSEOVMPPACSQ07\INST1','KRSEOVMPPACSQ08\INST1']
        
        for i in serverlist:
            self.serverComboBox.addItem(i)
        
        
        
        group.setLayout(box)
        group.setTitle("접속 정보")
        
        
        return group
    
    
    def connectButtonClicked(self):
        global passwords
        global users
        passwords = ''
        ecode = self.le3.text()
        users = 'guest'
    
        server = ids
        password = passwords
        db = 'master'
        user = users
        cnxn = pyodbc.connect("DRIVER={SQL Server};SERVER=" + server + ";uid=" + user + ";pwd=" + password + ";DATABASE=" + db  + ";trusted_connection=" + "yes")
        cursor = cnxn.cursor()
        
        sql = '''
                    SELECT ProjectName
                    FROM [DataAnalyticsRepository].[dbo].[Projects]
                    WHERE EngagementCode IN ({ecode})
                    AND DeletedBy is Null
       
            '''.format(ecode = ecode)
        
        projectsname = pd.read_sql(sql, cnxn)
        
        self.ProjectCombobox.clear()
        
        self.ProjectCombobox.addItem("--프로젝트 목록--")
        
        for i in range(0,len(projectsname)):
            self.ProjectCombobox.addItem(projectsname.iloc[i,0])
        
    def projectselected(self, text):
        server = ids
        password = passwords
        db = 'master'
        user = users
        
        cnxn = pyodbc.connect("DRIVER={SQL Server};SERVER=" + server + ";uid=" + user + ";pwd=" + password + ";DATABASE=" + db  + ";trusted_connection=" + "yes")
        cursor = cnxn.cursor()
        
        sql = '''
                    SELECT Project_ID
                    FROM [DataAnalyticsRepository].[dbo].[Projects]
                    WHERE ProjectName IN (\'{pname}\')
                    AND DeletedBy is Null
           
                '''.format(pname = text)
        
        fieldID = pd.read_sql(sql, cnxn)
        
        global fields
        
        fields = fieldID.iloc[0,0]
        
    def serverselected(self, text):
        global ids
        ids = text
        
    def extract(self):
        group = QGroupBox()
        box = QBoxLayout(QBoxLayout.TopToBottom)
        
        # SQL 서버 접속
        extractor = QGridLayout()
        self.extButton= QPushButton("데이터 추출")
        
        extractor.addWidget(self.extButton, 0, 0)
        
        
        
        self.extButton.clicked.connect(self.extButtonClicked)
        
        box.addLayout(extractor)
        group.setLayout(box)
        
        return group
    
    def tableview(self):
        tables = QGroupBox()
        box = QBoxLayout(QBoxLayout.TopToBottom)
        
      
        self.viewtable = QTableView(self)
    
        box.addWidget(self.viewtable)
        tables.setLayout(box)
        
        
        
        
        
        return tables
        
    def extButtonClicked(self):
        server = ids
        password = ''
        db = 'master'
        user = 'guest'
        
        cnxn = pyodbc.connect("DRIVER={SQL Server};SERVER=" + server + ";uid=" + user + ";pwd=" + password + ";DATABASE=" + db  + ";trusted_connection=" + "yes")
        cursor = cnxn.cursor()
        
        
        field = fields
        
        sql = '''
               SELECT TOP 100											
                   JournalEntries.BusinessUnit											
                   , JournalEntries.JENumber											
                   , JournalEntries.JELineNumber											
                   , JournalEntries.EffectiveDate											
                   , JournalEntries.EntryDate											
                   , JournalEntries.Period											
                   , JournalEntries.GLAccountNumber											
                   , CoA.GLAccountName											
                   , JournalEntries.Debit											
                   , JournalEntries.Credit											
                   , CASE
                        WHEN JournalEntries.Debit = 0 THEN 'Credit' ELSE 'Debit'
                        END AS DebitCredit
                   , JournalEntries.Amount											
                   , JournalEntries.FunctionalCurrencyCode											
                   , JournalEntries.JEDescription											
                   , JournalEntries.JELineDescription											
                   , JournalEntries.Source											
                   , JournalEntries.PreparerID											
                   , JournalEntries.ApproverID											
               FROM [{field}_Import_CY_01].[dbo].[pbcJournalEntries] JournalEntries,											
                       [{field}_Import_CY_01].[dbo].[pbcChartOfAccounts] COA											
               WHERE JournalEntries.GLAccountNumber = CoA.GLAccountNumber 
                   ORDER BY JENumber, JELineNumber											

            '''.format(field = field)
        
        df = pd.read_sql(sql, cnxn)
        model = DataFrameModel(df)
        self.viewtable.setModel(model)
    
     
    @pyqtSlot(QModelIndex)
    def slot_clicked_item(self, QModelIndex):
        self.stk_w.setCurrentIndex(QModelIndex.row())
        
        

if __name__ == "__main__":
    app = QApplication(sys.argv)
    form = Form()
    form.show()
    sys.exit(app.exec_())          
 